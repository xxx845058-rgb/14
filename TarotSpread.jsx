import React, { useState, useEffect } from 'react';
import TarotCard from './TarotCard';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Textarea } from './ui/textarea';
import { Shuffle, Eye, RotateCcw, Sparkles } from 'lucide-react';
import { generateMockReading } from '../data/mockTarotData';
import axios from 'axios';
import { useToast } from '../hooks/use-toast';

const API_BASE = `${process.env.REACT_APP_BACKEND_URL}/api`;

const TarotSpread = ({ 
  spreadType, 
  spreadTypes, 
  onBack,
  onSaveReading 
}) => {
  const [question, setQuestion] = useState('');
  const [cards, setCards] = useState([]);
  const [revealedCards, setRevealedCards] = useState(new Set());
  const [isShuffling, setIsShuffling] = useState(false);
  const [isGeneratingAI, setIsGeneratingAI] = useState(false);
  const [reading, setReading] = useState(null);
  const [allRevealed, setAllRevealed] = useState(false);
  const { toast } = useToast();

  const spread = spreadTypes.find(s => s.id === spreadType);

  useEffect(() => {
    if (spread) {
      shuffleCards();
    }
  }, [spreadType]);

  const shuffleCards = async () => {
    setIsShuffling(true);
    setRevealedCards(new Set());
    setReading(null);
    setAllRevealed(false);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ API
      const response = await axios.post(`${API_BASE}/cards/random`, {
        count: spread.positions,
        spread_type: spreadType
      });
      
      setCards(response.data.cards);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç:', error);
      toast({
        title: "‚ö†Ô∏è –û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        variant: "destructive"
      });
      
      // Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
      const mockCards = generateMockReading([], spreadType, question);
      setCards(mockCards.cards);
    } finally {
      setIsShuffling(false);
    }
  };

  const generateAIReading = async () => {
    if (!cards.length) return;
    
    setIsGeneratingAI(true);
    
    try {
      const response = await axios.post(`${API_BASE}/reading/generate`, {
        spread_type: spreadType,
        question: question || undefined,
        cards: cards
      });
      
      setReading({
        interpretation: response.data.interpretation,
        advice: response.data.advice
      });
      
      toast({
        title: "‚ú® –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!",
        description: "–ò–ò —Å–æ–∑–¥–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤–∞—à–∏—Ö –∫–∞—Ä—Ç.",
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:', error);
      
      toast({
        title: "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ò–ò",
        description: "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –∫–∞—Ä—Ç.",
        variant: "destructive"
      });
      
      // Fallback –Ω–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
      const mockReading = generateMockReading(cards, spreadType, question);
      setReading(mockReading);
    } finally {
      setIsGeneratingAI(false);
    }
  };

  const revealCard = (index) => {
    if (allRevealed || revealedCards.has(index)) return;
    
    const newRevealed = new Set(revealedCards);
    newRevealed.add(index);
    setRevealedCards(newRevealed);

    if (newRevealed.size === spread.positions) {
      setAllRevealed(true);
      setTimeout(() => {
        generateAIReading();
      }, 1000);
    }
  };

  const revealAllCards = () => {
    const allIndexes = new Set(Array.from({length: spread.positions}, (_, i) => i));
    setRevealedCards(allIndexes);
    setAllRevealed(true);
    
    setTimeout(() => {
      generateAIReading();
    }, 1000);
  };

  const getSpreadLayout = () => {
    switch (spread.layout) {
      case 'single':
        return 'grid grid-cols-1 place-items-center gap-8';
      case 'horizontal':
        return 'grid grid-cols-3 gap-8 justify-items-center';
      case 'cross':
        return 'grid grid-cols-4 gap-4 max-w-3xl mx-auto';
      case 'weekly':
        return 'grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-7 gap-4';
      case 'love':
        return 'grid grid-cols-2 lg:grid-cols-3 gap-6 justify-items-center';
      default:
        return 'grid grid-cols-3 gap-6';
    }
  };

  const getCardPosition = (index) => {
    if (!spread.positionNames) return null;
    return spread.positionNames[index];
  };

  const handleSaveReading = async () => {
    if (!reading) return;
    
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º session ID
      let sessionId = localStorage.getItem('tarot_session_id');
      if (!sessionId) {
        sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        localStorage.setItem('tarot_session_id', sessionId);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ API
      await axios.post(`${API_BASE}/reading/save`, {
        spread_type: spreadType,
        question: question || "–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å",
        cards: cards,
        interpretation: reading.interpretation,
        user_session: sessionId
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
      const readingData = {
        id: Date.now().toString(),
        date: new Date().toISOString().split('T')[0],
        spread_type: spreadType,
        question: question || "–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å",
        cards: cards.map((card, index) => ({
          ...card,
          position: getCardPosition(index)
        })),
        interpretation: reading.interpretation
      };
      
      if (onSaveReading) {
        onSaveReading(readingData);
      }
      
      toast({
        title: "üíæ –ì–∞–¥–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
        description: "–í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é.",
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–∞–¥–∞–Ω–∏—è:', error);
      toast({
        title: "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–∞–¥–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        variant: "destructive"
      });
    }
  };

  return (
    <div className="w-full max-w-7xl mx-auto p-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center mb-8">
        <Button 
          onClick={onBack}
          variant="outline" 
          className="mb-4 border-purple-400/50 text-purple-300 hover:bg-purple-600/20"
        >
          ‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–∞—Å–∫–ª–∞–¥–∞
        </Button>
        <h2 className="text-4xl font-bold bg-gradient-to-r from-purple-400 via-pink-300 to-indigo-400 bg-clip-text text-transparent mb-2">
          {spread.name}
        </h2>
        <p className="text-purple-200 text-lg">{spread.description}</p>
      </div>

      {/* –ü–æ–ª–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ */}
      <Card className="mb-8 bg-gradient-to-br from-indigo-900/30 to-purple-900/30 border-purple-600/30">
        <CardHeader>
          <CardTitle className="text-white text-center">–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–æ—ë–º –≤–æ–ø—Ä–æ—Å–µ</CardTitle>
        </CardHeader>
        <CardContent>
          <Textarea
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–∞—Ä—Ç –¢–∞—Ä–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)..."
            value={question}
            onChange={(e) => setQuestion(e.target.value)}
            className="bg-purple-900/20 border-purple-400/30 text-white placeholder:text-purple-300/60 min-h-20"
          />
        </CardContent>
      </Card>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex flex-wrap gap-4 justify-center mb-8">
        <Button
          onClick={shuffleCards}
          disabled={isShuffling}
          className="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2"
        >
          <Shuffle className="w-4 h-4 mr-2" />
          {isShuffling ? '–ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é...' : '–ü–µ—Ä–µ—Ç–∞—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã'}
        </Button>
        
        {cards.length > 0 && !allRevealed && (
          <Button
            onClick={revealAllCards}
            variant="outline"
            className="border-purple-400/50 text-purple-300 hover:bg-purple-600/20 px-6 py-2"
          >
            <Eye className="w-4 h-4 mr-2" />
            –û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã
          </Button>
        )}

        {allRevealed && (
          <Button
            onClick={shuffleCards}
            variant="outline" 
            className="border-purple-400/50 text-purple-300 hover:bg-purple-600/20 px-6 py-2"
          >
            <RotateCcw className="w-4 h-4 mr-2" />
            –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ
          </Button>
        )}
      </div>

      {/* –ö–∞—Ä—Ç—ã */}
      {cards.length > 0 && (
        <div className={`${getSpreadLayout()} mb-8`}>
          {cards.map((card, index) => (
            <TarotCard
              key={index}
              card={card}
              isRevealed={revealedCards.has(index)}
              onClick={() => revealCard(index)}
              position={getCardPosition(index)}
              className={isShuffling ? 'animate-pulse' : ''}
            />
          ))}
        </div>
      )}

      {/* AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è */}
      {isGeneratingAI && (
        <Card className="mb-8 bg-gradient-to-br from-indigo-900/50 to-purple-900/50 border-purple-600/30">
          <CardContent className="p-6 text-center">
            <div className="flex items-center justify-center space-x-3">
              <Sparkles className="w-6 h-6 text-purple-300 animate-spin" />
              <div className="space-y-2">
                <h3 className="text-white font-semibold">–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –∫–∞—Ä—Ç—ã...</h3>
                <p className="text-purple-200 text-sm">
                  –°–æ–∑–¥–∞—ë—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è */}
      {reading && (
        <Card className="bg-gradient-to-br from-indigo-900/50 to-purple-900/50 border-purple-600/30">
          <CardHeader>
            <CardTitle className="text-white text-2xl text-center">
              ‚ú® –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–∞—Ä—Ç –¢–∞—Ä–æ ‚ú®
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="bg-purple-900/30 rounded-lg p-6">
              <h3 className="text-purple-200 font-semibold mb-3 flex items-center">
                <Sparkles className="w-5 h-5 mr-2" />
                AI –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:
              </h3>
              <p className="text-white leading-relaxed text-lg">
                {reading.interpretation}
              </p>
            </div>
            
            <div className="bg-indigo-900/30 rounded-lg p-6">
              <h3 className="text-indigo-200 font-semibold mb-3">–°–æ–≤–µ—Ç –∫–∞—Ä—Ç:</h3>
              <p className="text-white leading-relaxed">
                {reading.advice}
              </p>
            </div>

            <div className="flex justify-center">
              <Button
                onClick={handleSaveReading}
                className="bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white px-8 py-2"
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–∞–¥–∞–Ω–∏–µ
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default TarotSpread;